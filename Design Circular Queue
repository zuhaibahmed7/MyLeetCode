class MyCircularQueue {
    int data[];
    int front;
    int rear;
    int count ;
    int size;
    public MyCircularQueue(int k) {
        data = new int[k];
        this.size = k;
        this.count = 0;
        this.front = 0;
        this.rear = 0;
       
    }

    public boolean enQueue(int value) {
        if(isFull()){return false;}
        data[rear] = value;
        rear = (rear+1)%size;
        count++;
        return true;
        
    }

    public boolean deQueue() {
        if(isEmpty()){return false;}
        front = (front+1)%size;
        count--;
        return true;
    }

    public int Front() {
        if(isEmpty()){return -1;}
      return data[front];
    }

    public int Rear() {
        if(isEmpty()){return -1;}
        int lastIndex = (rear-1+size)%size;
        return data[lastIndex];

       
    }

    public boolean isEmpty() {
        return count == 0;
    }

    public boolean isFull() {
        return count == size;
    }
}


/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue obj = new MyCircularQueue(k);
 * boolean param_1 = obj.enQueue(value);
 * boolean param_2 = obj.deQueue();
 * int param_3 = obj.Front();
 * int param_4 = obj.Rear();
 * boolean param_5 = obj.isEmpty();
 * boolean param_6 = obj.isFull();
 */
