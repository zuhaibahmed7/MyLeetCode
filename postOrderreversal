import java.util.Stack;
import java.util.List;
import java.util.LinkedList ;
public class postOrderIterative {

	TreeNode root;
	
	class TreeNode  {
		TreeNode right;
		TreeNode left;
		int data;
		TreeNode (int data){
			this.data= data;
			this.right= null;
			this.left= null;
		}
	}
	
	public void createtreeNode () {
		TreeNode first= new TreeNode(1);
		TreeNode second= new TreeNode(2);
		TreeNode third= new TreeNode(3);
		TreeNode fourth= new TreeNode(4);
		TreeNode fifth= new TreeNode(5);
		TreeNode sixth= new TreeNode(6);
		TreeNode seventh= new TreeNode(7);
		TreeNode eight= new TreeNode(8);
		TreeNode ninth= new TreeNode(9);
		TreeNode tenth= new TreeNode(10);
		
		
		root =first;
		first.left=second;
		first.right=third;
		second.left =fourth;
		second.right=fifth;
		third.right=sixth;
		third.left =seventh;
		fourth.left=eight;
		fourth.right=ninth;
		fifth.right=tenth; 
	}
	
	public List<Integer> postOrderIterative(TreeNode root){
		List<Integer> result= new LinkedList<Integer>();
		if(root==null) {
			return result;
		}
		
		
		// Stack2 will store contain the nodes root -> right -> left
		// Stack1 will store contain the nodes  right-> left -> root
		Stack<TreeNode> stack1 = new Stack <>();
		Stack<TreeNode> stack2 = new Stack <>();
		
		stack1.push(root);
		while(!stack1.isEmpty()) {
			TreeNode temp = stack1.pop();
			stack2.push(temp);
			
			if(temp.left!=null) {
				stack1.push(temp.left);
			}
			if(temp.right!=null) {
				stack1.push(temp.right);
			}
		}
		
		while(!stack2.isEmpty()) {
			result.add(stack2.pop().data);
		}
		return result;	
		}
	
	
	public static void main(String [] args ) {
		
	
	postOrderIterative pO = new postOrderIterative();
	pO.createtreeNode();
	System.out.print(pO.postOrderIterative(pO.root));
	}
}
